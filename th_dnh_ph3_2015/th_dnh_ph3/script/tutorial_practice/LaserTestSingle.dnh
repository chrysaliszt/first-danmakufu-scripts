#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Laser Test"]
#Text["Code by CHY"]

#include "script/default_system/Default_ShotConst.txt"

let objBoss;
let objScene = GetEnemyBossSceneObjectID();

@Event {
	alternative(GetEventType())
    case(EV_REQUEST_LIFE) {
        SetScriptResult(500);
    }
    case(EV_REQUEST_TIMER) {
        SetScriptResult(60);
    }
    case(EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
	objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    ObjEnemy_Regist(objBoss);
    ObjMove_SetDestAtFrame(objBoss, GetStgFrameWidth() / 2, 60, 60);

    ObjEnemyBossScene_StartSpell(objScene);

	TDrawLoop;
    TFinalize;
    TMainTask;
}

@MainLoop {
	ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);

    yield;
}

task TDrawLoop {
    let imgExRumia = GetCurrentScriptDirectory() ~ "ExRumia.png";
    ObjPrim_SetTexture(objBoss, imgExRumia);
    ObjSprite2D_SetSourceRect(objBoss, 64, 1, 127, 64);
    ObjSprite2D_SetDestCenter(objBoss);
}

task TFinalize {
    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
        yield;
    }
    if (ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT) + ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) == 0) {
        AddScore(ObjEnemyBossScene_GetInfo(objScene, INFO_SPELL_SCORE));
    }
    Obj_Delete(objBoss);
    DeleteShotAll(TYPE_ALL, TYPE_IMMEDIATE);
    SetAutoDeleteObject(true);
    CloseScript(GetOwnScriptID());
}

task TMainTask {
	wait(120);
	movement;
	fireA;
	fireB;
	fireC;
}

// Movement pattern: the boss moves within a small range around the current position, bounded by a max and min limit.
task movement {
    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
		let bossX = ObjMove_GetX(objBoss);
		let bossY = ObjMove_GetY(objBoss);

		let width = GetStgFrameWidth();
		let height = GetStgFrameHeight();

		let bossXMaxLimit = width * 0.95;
		let bossXMinLimit = width * 0.05;

		let bossYMaxLimit = height * 0.3;
		let bossYMinLimit = height * 0.1;

        ObjMove_SetDestAtFrame(objBoss, 
			rand(max(bossXMinLimit, bossX - width * 0.4), min(bossXMaxLimit, bossX + width * 0.4)), 
			rand(max(bossYMinLimit, bossY - height * 0.15), min(bossYMaxLimit, bossY + height * 0.15)), 
			60
		);

		wait(180);
    }
}

// Bullet pattern: shoots a ring of loose lasers aimed around the player.
task fireA {
	while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
		let angleT = GetAngleToPlayer(objBoss) + 360/13/2;
		loop(13) {
            slowLooseLaser(angleT);
			DelayLaser(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), angleT, GetStgFrameHeight() * 1.5, 200, 0, DS_BEAM_GREEN, 140);
            angleT += 360/13;
        }
        wait(60);
	}
}

// Bullet pattern: shoot a straight laser aimed at the player. After becoming active, it will slowly rotate towards the player until it disappears.
task fireB {
	while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
		let angleT = GetAngleToPlayer(objBoss);
		let obj = CreateStraightLaserA1(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), angleT, GetStgFrameHeight() * 1.5, 20, 80, DS_BEAM_RAINBOW, 55);
		wait(60);
		if (GetAngleToPlayer(obj) > angleT) {
			angleT = 10;
		}
		else {
			angleT = -10;
		}
		rotateStraightLaser(obj, angleT, 80);
		wait(60);
	}
}

task fireC {
	while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
		let angleT = GetAngleToPlayer(objBoss) - 30;
		ascent(i in 0..2) {
			let objLaser = CreateCurveLaserA1(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 6, angleT, 60, 18, DS_MISSILE_SKY, 10);
			ObjCrLaser_SetTipDecrement(objLaser, 0);
			SnakePattern(objLaser, 2 * (1 - 2*i));
			angleT += 60;
		}
		wait(55);
	}
}

task slowLooseLaser(angle) {
	let laser = CreateLooseLaserA1(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 1, angle, 14, 12, DS_SCALE_GREEN, 20);
	ObjRender_SetBlendType(laser, BLEND_INV_DESTRGB);
	wait(140);
	ObjMove_SetSpeed(laser, 8);
	ObjLaser_SetLength(laser, 175);
}

task DelayLaser(x, y, ang, l, w, dt, graphic, delay) { 
    let objLaser = CreateStraightLaserA1(x, y, ang, l, w, dt, graphic, delay);
    ObjStLaser_SetSource(objLaser, false);
	let alpha = 0;
	ObjRender_SetAlpha(objLaser, alpha);
	wait(20);
    loop(delay-1 - 20){ //So that the graphic never enlarges. 
        if(ObjEnemy_GetInfo(objBoss, INFO_LIFE) <= 0){
            Obj_Delete(objLaser); 
            return;
        }
		ObjMove_SetX(objLaser, ObjMove_GetX(objLaser) + 1 * cos(ang));
		ObjMove_SetY(objLaser, ObjMove_GetY(objLaser) + 1 * sin(ang));
		alpha += 0.5;
		ObjRender_SetAlpha(objLaser, alpha);
        yield;
    }
    Obj_Delete(objLaser);
}

task rotateStraightLaser(objID, angle, frames) {
	let currentAngle = ObjStLaser_GetAngle(objID);
	loop(frames) {
		currentAngle += angle/frames;
		ObjStLaser_SetAngle(objID, currentAngle);
		yield;
	}
}

task SnakePattern(obj, wvel) {
	ascent(i in 1..12){
	    ObjMove_AddPatternA2(obj, i * 30, NO_CHANGE, NO_CHANGE, 0, wvel, NO_CHANGE);
	    wvel *= -1;
	}
}

function wait(frames) {
	loop(frames) {
		yield;
	}
}