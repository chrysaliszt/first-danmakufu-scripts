#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Border of Wave and Particle"]
#Text["Code by CHY[r]A recreation of Border of Wave and Particle, Yukari's spell from Touhou 7!"]

#include "script/default_system/Default_ShotConst.txt"

let objBoss;
let objScene = GetEnemyBossSceneObjectID();

@Event {
	alternative(GetEventType())
    case(EV_REQUEST_LIFE) {
        SetScriptResult(500);
    }
    case(EV_REQUEST_TIMER) {
        SetScriptResult(60);
    }
    case(EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
	objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    ObjEnemy_Regist(objBoss);
    ObjMove_SetDestAtFrame(objBoss, GetStgFrameWidth() / 2, GetStgFrameHeight() / 2, 60);

    ObjEnemyBossScene_StartSpell(objScene);

	TDrawLoop;
    TFinalize;
    TMainTask;
}

@MainLoop {
	ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);

    yield;
}

task TDrawLoop {
    let imgExRumia = GetCurrentScriptDirectory() ~ "ExRumia.png";
    ObjPrim_SetTexture(objBoss, imgExRumia);
    ObjSprite2D_SetSourceRect(objBoss, 64, 1, 127, 64);
    ObjSprite2D_SetDestCenter(objBoss);
}

task TFinalize {
    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
		yield;
    }
    if (ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT) + ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) == 0) {
        AddScore(ObjEnemyBossScene_GetInfo(objScene, INFO_SPELL_SCORE));
    }
    Obj_Delete(objBoss);
    DeleteShotAll(TYPE_ALL, TYPE_IMMEDIATE);
    SetAutoDeleteObject(true);
    CloseScript(GetOwnScriptID());
}

task TMainTask {
    wait(65);
	BoWaP(8);
}

task BoWaP(shotsPerRing) {
    let angleT = rand(0, 360);
    let counter = 1;
    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
        loop(shotsPerRing) {
            CreateShotA1(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 2, angleT, DS_BALL_SS_WHITE, 5);
            angleT += 360 / shotsPerRing;
        }
        counter++;
        angleT += sin(counter * 1.5) * 10;
		wait(2);
    }
}

function wait(frames) {
	loop(frames) {
		yield;
	}
}