#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["This Side Down Recreation"]
#Text["Code by CHY[r]A recreation of This Side Down, Seija's spell from Touhou 14!"]
//----------------------------------------------------
// INCLUDE SHOTSHEET HERE
//----------------------------------------------------
#include "script/default_system/Default_ShotConst.txt"

let objBoss;
let objScene = GetEnemyBossSceneObjectID();

//----------------------------------------------------
// CHANGE BOSS HEALTH, TIME, AND SPELL BONUS HERE
//----------------------------------------------------
@Event {
	alternative(GetEventType())
    case(EV_REQUEST_LIFE) {
        SetScriptResult(500);
    }
    case(EV_REQUEST_TIMER) {
        SetScriptResult(60);
    }
    case(EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
	objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    ObjEnemy_Regist(objBoss);
//----------------------------------------------------
// CHANGE INITIAL BOSS POSITION HERE
//----------------------------------------------------
    ObjMove_SetDestAtFrame(objBoss, GetStgFrameWidth() / 2, 60, 60);

    ObjEnemyBossScene_StartSpell(objScene);

    TRenderBackground;
	TDrawLoop;
    TFinalize;
    TMainTask;
}

@MainLoop {
//----------------------------------------------------
// CHANGE BOSS HITBOXES HERE
//----------------------------------------------------
	ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);

    yield;
}

task TRenderBackground {
//----------------------------------------------------
// CHANGE 2D BACKGROUND SPRITE AND ANIMATION HERE
//----------------------------------------------------
    let objBG = ObjPrim_Create(OBJ_SPRITE_2D);
    let imgpath = GetCurrentScriptDirectory() ~ "./default_system/img/RaikoSpellBackground.jpg";
    ObjPrim_SetTexture(objBG, imgpath);

    ObjSprite2D_SetSourceRect(objBG, 0, 0, 384, 448);
    ObjSprite2D_SetDestCenter(objBG);
    ObjRender_SetPosition(objBG, GetCenterX(), GetCenterY(), 0);
    Obj_SetRenderPriorityI(objBG, 20);
}

task TDrawLoop {
//----------------------------------------------------
// CHANGE BOSS SPRITE AND ANIMATION HERE
//----------------------------------------------------
    let imgPath = GetCurrentScriptDirectory() ~ "./u2l13spritesheet.png";
    ObjPrim_SetTexture(objBoss, imgPath);
    ObjSprite2D_SetSourceRect(objBoss, 64, 1, 127, 64);
    ObjSprite2D_SetDestCenter(objBoss);

    let aniFrame = 0;
    let motion = 0;
    let currentPos = [ObjMove_GetX(objBoss), ObjMove_GetY(objBoss)];
    let previousPos = currentPos;

    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
        // Update previous and current position.
        previousPos = currentPos;
        currentPos = [ObjMove_GetX(objBoss), ObjMove_GetY(objBoss)];

        // Check if the boss is idle or moving.
        if (currentPos[0] - previousPos[0] + currentPos[1] - previousPos[1] == 0) {
            motion = 0;
        } else {
            motion = 1;
        }

        // Set source rectangle based on motion or idle.
        ObjSprite2D_SetSourceRect(objBoss, 0 + 64 * floor(aniFrame / 8), 0 + 64 * motion, 64 + 64 * floor(aniFrame / 8), 64 + 64 * motion);
        aniFrame++;
        if (aniFrame >= 4 * 8) {
            aniFrame = 0;
        }
        yield;
        
    }
}

task TFinalize {
    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
		yield;
    }
    if (ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT) + ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) == 0) {
        AddScore(ObjEnemyBossScene_GetInfo(objScene, INFO_SPELL_SCORE));
    }
    Obj_Delete(objBoss);
    DeleteShotAll(TYPE_ALL, TYPE_IMMEDIATE);
    SetAutoDeleteObject(true);
	ascent(i in -30..31) {
		Set2DCameraRatioY(i / 30);
		yield;
	}
    CloseScript(GetOwnScriptID());
}

task TMainTask {
//----------------------------------------------------
// ADD MAIN TASKS HERE
//----------------------------------------------------
	wait(60);
	movement;
	// Flip the screen vertically.
	ascent(i in -30..31) {
		Set2DCameraRatioY(-i / 30);
		yield;
	}
	fire;
}

task movement {
	while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
		let bossX = ObjMove_GetX(objBoss);
		let bossY = ObjMove_GetY(objBoss);

		let width = GetStgFrameWidth();
		let height = GetStgFrameHeight();

		let bossXMaxLimit = width * 0.95;
		let bossXMinLimit = width * 0.05;

		let bossYMaxLimit = height * 0.3;
		let bossYMinLimit = height * 0.1;

        ObjMove_SetDestAtFrame(objBoss, 
			rand(max(bossXMinLimit, bossX - width * 0.4), min(bossXMaxLimit, bossX + width * 0.4)), 
			rand(max(bossYMinLimit, bossY - height * 0.15), min(bossYMaxLimit, bossY + height * 0.15)), 
			60
		);

		wait(180);
    }
}

task fire {
	let counter = 0;
	while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
		let x = GetCenterX() + GetCenterX() * cos(counter * 15);
		let y = rand(0, GetStgFrameHeight() / 4);

		ascent(i in -1..2) {
			let angle = 90 + (15 * cos(counter * 15)) + (30 * i) + (rand(-15, 15));
			let obj = CreateShotA1(x, y, 1.8, angle, DS_FIRE_RED, 12);
			ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		}

		wait(8);
		counter++;
	}
}

function GetCenterX() {
    return GetStgFrameWidth() / 2;
}

function GetCenterY() {
    return GetStgFrameHeight() / 2;
}

function wait(frames) {
	loop(frames) {
		yield;
	}
}