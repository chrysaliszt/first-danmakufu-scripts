#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Numako Tsuyuba Nonspell 1"]
#Text["Code by CHY[r]Numako Tsuyuba's first nonspell!"]
//----------------------------------------------------
// INCLUDE SHOTSHEET HERE
//----------------------------------------------------
#include "script/default_system/Default_ShotConst.txt"

let objBoss;
let objScene = GetEnemyBossSceneObjectID();

//----------------------------------------------------
// CHANGE BOSS HEALTH, TIME, AND SPELL BONUS HERE
//----------------------------------------------------
@Event {
	alternative(GetEventType())
    case(EV_REQUEST_LIFE) {
        SetScriptResult(1500);
    }
    case(EV_REQUEST_TIMER) {
        SetScriptResult(60);
    }
    case(EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
	objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    ObjEnemy_Regist(objBoss);
//----------------------------------------------------
// CHANGE INITIAL BOSS POSITION HERE
//----------------------------------------------------
    ObjMove_SetDestAtFrame(objBoss, GetStgFrameWidth() / 2, 60, 60);

    // ObjEnemyBossScene_StartSpell(objScene);

    // TRenderBackground;
	TDrawLoop;
    TFinalize;
    TMainTask;
}

@MainLoop {
//----------------------------------------------------
// CHANGE BOSS HITBOXES HERE
//----------------------------------------------------
	ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);

    yield;
}

// task TRenderBackground {
// //----------------------------------------------------
// // CHANGE 2D BACKGROUND SPRITE AND ANIMATION HERE
// //----------------------------------------------------
//     let objBG = ObjPrim_Create(OBJ_SPRITE_2D);
//     let imgpath = GetCurrentScriptDirectory() ~ "./spellBackground.jpg";
//     ObjPrim_SetTexture(objBG, imgpath);

//     ObjSprite2D_SetSourceRect(objBG, 0, 0, 384, 448);
//     ObjSprite2D_SetDestCenter(objBG);
//     ObjRender_SetPosition(objBG, GetCenterX(), GetCenterY(), 0);
//     Obj_SetRenderPriorityI(objBG, 20);
// }

task TDrawLoop {
//----------------------------------------------------
// CHANGE BOSS SPRITE AND ANIMATION HERE
//----------------------------------------------------
    let imgPath = GetCurrentScriptDirectory() ~ "./u2l13spritesheet.png";
    ObjPrim_SetTexture(objBoss, imgPath);
    ObjSprite2D_SetSourceRect(objBoss, 64, 1, 127, 64);
    ObjSprite2D_SetDestCenter(objBoss);

    let aniFrame = 0;
    let motion = 0;
    let currentPos = [ObjMove_GetX(objBoss), ObjMove_GetY(objBoss)];
    let previousPos = currentPos;

    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
        // Update previous and current position.
        previousPos = currentPos;
        currentPos = [ObjMove_GetX(objBoss), ObjMove_GetY(objBoss)];

        // Check if the boss is idle or moving.
        if (currentPos[0] - previousPos[0] + currentPos[1] - previousPos[1] == 0) {
            motion = 0;
        } else {
            motion = 1;
        }

        // Set source rectangle based on motion or idle.
        ObjSprite2D_SetSourceRect(objBoss, 0 + 64 * floor(aniFrame / 8), 0 + 64 * motion, 64 + 64 * floor(aniFrame / 8), 64 + 64 * motion);
        aniFrame++;
        if (aniFrame >= 4 * 8) {
            aniFrame = 0;
        }
        yield;
        
    }
}

task TFinalize {
    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
		yield;
    }
    if (ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT) + ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) == 0) {
        AddScore(ObjEnemyBossScene_GetInfo(objScene, INFO_SPELL_SCORE));
    }
    Obj_Delete(objBoss);
    DeleteShotAll(TYPE_ALL, TYPE_IMMEDIATE);
    SetAutoDeleteObject(true);
    CloseScript(GetOwnScriptID());
}

task TMainTask {
//----------------------------------------------------
// ADD MAIN TASKS HERE
//----------------------------------------------------
    wait(60);
    movement(60, 60, 120);
    fireSeed;
}

// Boss movement: pick a random direction, and move "radius" pixels in that direction.
// Bound by max/min X and Y.
task movement(radius, moveFrames, waitFrames) {
    let maxX = GetStgFrameWidth() * (0.50 + 0.40);
    let minX = GetStgFrameWidth() * (0.50 - 0.40);
    let maxY = GetStgFrameHeight() * (0.25 + 0.10);
    let minY = GetStgFrameHeight() * (0.25 - 0.10);

    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
        let currentX = ObjMove_GetX(objBoss);
        let currentY = ObjMove_GetY(objBoss);

        let angle = GetAngleToPlayer(objBoss);
        if (angle > 90 || angle < -90) {angle = rand(180 - 45, 180 + 45);}
        else {angle = rand(-45, 45);}

        let finalX = currentX + radius * cos(angle);
        let finalY = currentY + radius * sin(angle);

        if (finalX > maxX) {finalX = maxX;} 
        else if (finalX < minX) {finalX = minX;}

        if (finalY > maxY) {finalY = maxY;}
        else if (finalY < minY) {finalY = minY;}

        ObjMove_SetDestAtFrame(objBoss, finalX, finalY, moveFrames);
        wait(waitFrames);
    }
}

task fireSeed {
    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
        let shotSeed = CreateShotOA1(objBoss, 5, 0, DS_BALL_L_GREEN, 30);
        ObjMove_SetDestAtSpeed(shotSeed, GetPlayerX(), GetStgFrameHeight(), 5);
        renderShotSeed(shotSeed);
        fireFromSeed(shotSeed);
        wait(240);
        Obj_Delete(shotSeed);
    }
}

task renderShotSeed(shotSeed) {
    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0 && Obj_IsDeleted(shotSeed) == false) {
        ObjRender_SetAngleZ(shotSeed, ObjRender_GetAngleZ(shotSeed) + rand(180, 360));
        ObjRender_SetScaleXYZ(shotSeed, 1 + rand(-0.03, 0.03), 1 + rand(-0.03, 0.03), 1 + rand(-0.03, 0.03));
        wait(2);
    }
}

task fireFromSeed(shotSeed) {
    while(ObjMove_GetY(shotSeed) < GetStgFrameHeight() - 10) {
        yield;
    } 

    let seedX = ObjMove_GetX(shotSeed);
    let seedY = ObjMove_GetY(shotSeed);
    let i = 0;

    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0 && (i * 20) < GetStgFrameHeight()) {
        let shotBall = CreateShotA1(seedX, seedY - 20*i, 1, rand(0, 360), DS_BALL_S_A_YELLOW, 30);
        ascent(j in 0..5) {
            let shotNeedle = CreateShotA1(seedX + 10*((i/8)^2)*(i%2 * 2 - 1) + 3*j*(i%2 * 2 - 1), seedY - 20*i, 1, 180 + 180*(i%2), DS_NEEDLE_GREEN, 30);
            ObjRender_SetScaleXYZ(shotNeedle, 1.5 - 0.5/2*j, 1.5 - 0.5/2*j, 1);
        }
        ObjMove_AddPatternA2(shotBall, 60, NO_CHANGE, NO_CHANGE, 0.03, 0, 3);
        i++;
        wait(2);
    }
}

function GetCenterX() {
    return GetStgFrameWidth() / 2;
}

function GetCenterY() {
    return GetStgFrameHeight() / 2;
}

function wait(frames) {
	loop(frames) {
		yield;
	}
}